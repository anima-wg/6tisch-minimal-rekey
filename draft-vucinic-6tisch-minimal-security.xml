<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc subcompact="yes"?>
<rfc category="std" ipr="trust200902" docName="draft-vucinic-6tisch-minimal-security-00">
<front>
    <title abbrev="vucinic-6tisch-minimal-security">
        Minimal Security Framework for 6TiSCH
    </title>
    <author initials="M" surname="Vucinic" fullname="Malisa Vucinic" role="editor">
        <organization>Inria</organization>
        <address>
            <postal>
                <street>2 Rue Simone Iff</street>
                <city>Paris</city>
                <code>75012</code>
                <country>France</country>
            </postal>
            <email>malisa.vucinic@inria.fr</email>
        </address>
    </author>
    <author initials="J" surname="Simon" fullname="Jonathan Simon">
        <organization>Linear Technology</organization>
        <address>
            <postal>
                <street>32990 Alvarado-Niles Road, Suite 910</street>
                <city>Union City</city>
                <region>CA</region>
                <code>94587</code>
                <country>USA</country>
            </postal>
            <email>jsimon@linear.com</email>
        </address>
    </author>
    <author initials="K" surname="Pister" fullname="Kris Pister">
        <organization>University of California Berkeley</organization>
        <address>
            <postal>
                <street>490 Cory Hall</street>
                <city>Berkeley</city>
                <region>California</region>
                <code>94720</code>
                <country>USA</country>
         </postal>
         <email>kpister@eecs.berkeley.edu</email>
      </address>
   </author>
    <date/>
    <area>Internet Area</area>
    <workgroup>6TiSCH</workgroup>
    <keyword>Draft</keyword>
    <abstract>
        <t>
            This draft describes the minimal mechanisms required to support secure initial configuration in a device being added to a 6TiSCH network. 
            The goal of this configuration is to set link-layer keys, and to establish a secure session between each joining node and the JCE who may use that to further configure the joining device.
            Additional security behaviors and mechanisms may be added on top of this minimal framework.
        </t>
    </abstract>
    <note title="Requirements Language">
        <t>
            The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.
        </t>
    </note>
</front>
<middle>
    <section title="Introduction"                                    anchor="sec_intro">
        <t>
            When a previously unknown device seeks admission to a 6TiSCH <xref target="RFC7554"/> network (to "join"), it first needs to synhronize to the network.
            The device then configures its IPv6 address and authenticates itself, and also validates that it is joining the right network. 
            At this point it can expect to interact with the network to configure its link-layer keying material.
            Only then the node may establish an end-to-end secure session with an Internet host using DTLS <xref target="RFC6347"/> or OSCOAP <xref target="I-D.selander-ace-object-security"/>. 
            Once the application requirements are known, the device interacts with its peers to request additional resources as needed, or to be reconfigured as the network changes <xref target="I-D.ietf-6tisch-6top-protocol"/>.
        </t>
        <t>
            This document describes the mechanisms comprising a minimal feature set for a device to join a 6TiSCH network, up to the point where it can establish a secure session with an Internet host. 
        </t>
        <t>
            It presumes a network as described by <xref target="I-D.ietf-6tisch-architecture"/>, <xref target="I-D.ietf-6tisch-6top-protocol"/>, and <xref target="I-D.ietf-6tisch-terminology"/>.
            It assumes the joining device preconfigured with a pre-shared key (PSK) or a locally-valid certificate and expects as the outcome of the join process one or more link-layer key(s).
        </t>
    </section>
    <section title="Terminology" anchor="sec_terminology">
        <t>
            The reader is expected to be familiar with the terms and concepts defined in <xref target="I-D.ietf-6tisch-terminology"/>, <xref target="RFC7252"/>, and <xref target="I-D.selander-ace-object-security"/>.

            The entities participating in the protocol that is specified in this document are defined bellow.
        </t>
        <t>
            JN: Joining node - the device attempting to join a particular 6TiSCH network.
        </t>
        <t>
            JCE: Join coordinating entity - central entity responsible for authentication and authorization of joining nodes.
        </t>
        <t>
            JA: Join assistant - the device within radio range of the JN that generates Enhanced Beacons (EBs) and facilitates end-to-end communications between the JN and JCE.        
        </t>
    </section>
    <section title="Join Overview" anchor="sec_overview">
        <t>
            This section describes the steps taken by a joining node (JN) in a 6TiSCH network. 
            When a previously unknown device seeks admission to a 6TiSCH <xref target="RFC7554"/> network, the following exchange occurs:
            <list style="numbers">
                <t>
                    The JN listens for an Enhanced Beacon (EB) frame <xref target="IEEE802154e"/>. 
                    This frame provides network synchronization information, and tells the device when it can send a frame to the node sending the beacons, which plays the role of Join Assistant (JA) for the JN, and when it can expect to receive a frame.
                </t>
                <t>
                    The JN configures its link-local IPv6 address and advertizes it to JA. 
                </t>
                <t>
                    The JN sends packets to the JA device that securely identifies the new device to the network. 
                    These packets are directed to the Join Coordination Entity or JCE, which may be the JA or another device.
                </t>
                <t>
                    The JN receives one or more packets from JCE (via the JA) that sets up one or more link-layer keys used to authenticate subsequent transmissions to peers.
                </t>
            </list>
            From the joining node's perspective, minimal joining is a local phenomenon – the JN only interacts with the JA, and it need not know how far it is from the DAG root, or how to route to the JCE.
            Only after establishing one or more link-layer keys does it need to know about the particulars of a 6TiSCH network.

            The handshake is shown as a transaction diagram in <xref target="fig_messagesequence"/>:

            <figure title="Message sequence for join protocol." anchor="fig_messagesequence">
<artwork><![CDATA[
   +-----+               +----------+              +-----------+
   | JCE |               |    JA    |              |     JN    |
   |     |               |          |              |           |
   +-----+               +----------+              +-----------+
      |                        |                            |
      |                        |-------ENH BEACON (1)------>|
      |                        |                            |
      |                        |<--Neighbor Discovery (2)-->|        
      |                        |                            |
      |<-Sec. Handshake (3a)-->|<--Security Handshake (3)-->|
      |                        |                            |
      |<--Join request (4a)----|<----Join request (4) ------|
      |                        |                            |
      |---Join response (5a)-->|----Join response (5) ----->|
      |                        |                            |
]]></artwork>
            </figure>
            The details of each step are described in the following sections.
        </t>
        <section title="Step 1 - Enhanced Beacon" anchor="sec_enhanced">
            <t>
                The JN hears an EB from the JA and synchronizes itself to the joining schedule using the cells contained in the EB.
                At this point the JN MAY proceed to step 2, or continue to listen for additional EBs. 
                If more than one EB is heard, the JN MAY use a metric based on DAG rank and received signal level of the EB, or other factors to decide which JA to use for the security handshake in step 3.
                Details about how a JN chooses the JA are out of scope of this specification.
            </t>
        </section>
        <section title="Step 2 - Neighbor Discovery" anchor="sec_nd">
            <t>
                At this point, JN forms its link-local IPv6 address based on EUI64 and may further follow the Neighbor Discovery (ND) process described in Section 5 of <xref target="RFC6775"/>.
            </t>
        </section>
        <section title="Step 3 - Security Handshake" anchor="sec_handshake">
            <t>
                The optional security handshake uses Ephemeral Diffie-Hellman over COSE (EDHOC) <xref target="I-D.selander-ace-cose-ecdhe"/> to establish the shared secret used to encrypt the join request and join response.
            </t>
            <section title="Pre-Shared Key" anchor="sec_psk">
                <t>
                    When using a pre-shared symmetric key, the Diffie-Hellman key exchange and the use of EDHOC is optional. 
                    This cuts down on traffic between JCE and JN, but requires pre-configuration of the shared key on both devices.
                </t>
                <t>
                    In case the EDHOC step is omitted, the key used for protection of the join request and join response in the next step is the PSK.
                    This means that the protocol trades off perfect forward secrecy for reduced traffic load between JN and JCE.
                    A consequence is that if the long-term PSK is compromised, keying material transfered as part of the join response is compromised as well.
                    Physical compromise of the JN, however, would also imply the compromise of the same keying material, as it is likely to be found in node's memory.
                </t>
                <t>
                    It is RECOMMENDED to use unique PSKs for each JN.
                </t>
            </section>
            <section title="Asymmetric Key" anchor="sec_ecc">
                <t>
                    When using asymmetric keys, the Security Handshake step is required. Before conducting the Diffie-Hellman key exchange using EDHOC <xref target="I-D.selander-ace-cose-ecdhe"/> the JN and JCE need to receive and validate each other's public key certificate. 
                    This process is described in <xref target="sec_asymmetric"/>.
                </t>
            </section>
        </section>
        <section title="Step 4 - Join Request" anchor="sec_joinrequest">
            <t>
                The join request is sent from the JN to the JA using the slot information from the EB, and forwarded to the JCE. 
            </t>
            <t>
                The join request is authenticated/encrypted end-to-end using AES-CCM-16-64-128 algorithm from <xref target="I-D.ietf-cose-msg"/>  and the shared secret from step 3 as the key. 
                The nonce is derived from the shared secret, JN's EUI64 and a monotonically increasing counter initialized to 0 when first starting.
            </t>
        </section>
        <section title="Step 5 - Join Response" anchor="sec_joinresponse">
            <t>
                The join response is sent from the JCE to the JN through JA that serves as a stateless relay.
                Packet contaning the join response travels on the path from JCE to JA using pre-established routes in the network.
                The JA delivers it to the JN using the slot information from the EB.
                JA operates as the application-layer proxy and does not keep any state to relay the message.
                It uses information sent in clear within the join response to decide where to forward.
            </t>
            <t>
                The join response is authenticated/encrypted using AES-CCM-16-64-128 algorithm from <xref target="I-D.ietf-cose-msg"/> with the shared secret from step 3. 
                The nonce is derived from the shared secret, JN's EUI64 and a monotonically increasing counter matching that of the join request. 
            </t>
            <t>
                The join response contains one or more (per-peer) link-layer key(s) K2 that the JN will use for subsequent communication.
                It optionally also contains an IEEE 802.15.4 short-address <xref target="IEEE802154"/> assigned to JN by JCE.  
            </t>
        </section>
    </section>
    <section title="Protocol Specification" anchor="sec_details">
        <t>
            The join protocol in <xref target="fig_messagesequence"/> is implemented over Constrained Application Protocol (CoAP) <xref  target="RFC7252"/>.
            JN shall play the role of a CoAP client, JCE the role of a CoAP server, while JA shall implement CoAP forward proxy functionality <xref target="RFC7252"/>.
            Since JA is likely a constrained device, it does not need to implement a cache but rather process proxy-related CoAP options and make requests on behalf of JN that is not yet part of the network.
        </t>
        <t>
            JN and JCE MUST protect their exchange end-to-end (i.e. through the proxy) using Object Security of CoAP (OSCOAP) <xref target="I-D.selander-ace-object-security"/>.
        </t>
        <section title="Proxy Operation of JA" anchor="sec_proxy">
        <t>
            JN designates a JA as a proxy by including in the CoAP requests to JA the Proxy-URI option with string "6tisch.jce" as the host part.
            JN does not need to learn the actual IPv6 address of JCE at any time during the join protocol.
            JA resolves the address by performing a GET request at "/jce" resource of its parent in the DODAG.
        </t>
        <t>
            Note that the CoAP proxy by default keeps state information in order to forward the response towards the originator of the request.
            This state information comprises CoAP token, but the implementations also need to keep track of the IPv6 address of the host, as well as the corresponding UDP source port number.
            In the setting where the proxy is a constrained device, as in the case of JA, this makes it prone to Denial of Service (DoS) attacks, due to the limited memory.
        </t>
        <t>
            In order to facilitate a stateless implementation of JA proxying, JN shall encode in the CoAP message the information necessary for the JA to send the response back - "origin_info".
            For this purpose, JN uses the "Context Identifier (Cid)" parameter of OSCOAP's security context structure.
            Context Identifier is sent in clear, readable by JA, and MUST be echoed back in the response from JCE. 
            This makes it possible to implement JA's CoAP proxy in a stateless manner.
            It also allows JCE to look up the right security context for communication with a given JN.
        </t>
        <section title="Implementation of origin_info" anchor="sec_implemrelayinfo">
            <t>
                The origin_info is implemented as a CBOR <xref target="RFC7049"/> array object containing:
                 <list style="symbols">
                    <t>
                        EUI64: JN's EUI64 address
                    </t>
                    <t>
                        source_port: JN's UDP source port
                    </t>
                    <t>
                        token: JN's CoAP token
                    </t>
                </list>
<figure>
<artwork><![CDATA[
    origin_info = [
        EUI64 : bstr,
        source_port : uint,
        token : uint
    ]
]]></artwork>
</figure>
            </t>
        </section>
        </section>
        <section title="OSCOAP Security Context Instantiation" anchor="sec_oscoapinst">
            <t>
                The OSCOAP security context MUST be derived at JN and JCE as per Section 3.2 of <xref target="I-D.selander-ace-object-security"/> using HKDF <xref target="RFC5869"/> as the key derivation function.
                <list style="symbols">
                    <t>
                        Context Identifier (Cid) MUST be the origin_info object wrapped as a byte string (bstr).
                    </t>
                    <t>
                        Algorithm MUST be set to AES-CCM-16-64-128 from <xref target="I-D.ietf-cose-msg"/>.
                        CoAP messages are therefore protected with an 8-byte CCM authentication tag and the algorithm uses 13-byte long nonces.
                    </t>
                    <t>
                        Base key (base_key) MUST be the secret generated by the run of EDHOC, or the PSK in case EDHOC step was omitted.
                    </t>
                    <t>
                        Sender ID of JN MUST be set to 0x00, while the ID of JCE MUST be set to 0x01.
                    </t>
                </list>
                The derivation in <xref target="I-D.selander-ace-object-security"/> results in traffic keys and static IVs for each side of the conversation.
                Nonces are constructed by XOR'ing the static IV with current sequence number.
                Note that the address of JCE does not take part in nonce construction and that Sender ID values of each side distinguish between a request and a response.
                The context derivation process occurs exactly once.
                Implementations MUST ensure that multiple CoAP requests to different JCEs result in the use of the same OSCOAP context so that sequence numbers are properly incremented for each request.
                This may happen in a scenario where there are multiple 6TiSCH networks present and the JN tries to join one network at a time.
            </t>
        </section>   
       <section title="Implementation of Join Request" anchor="sec_implemjoinrequest">
            <t>
                Join Request message SHALL be mapped to a CoAP request:
                <list style="symbols">
                    <t>
                        The request method is GET.
                    </t>
                    <t>
                        The Proxy-URI shall be constructed from JCE's global IPv6 address.
                    </t>
                    <t>
                        The Uri-Path is "6j".
                    </t>
                    <t>
                        The object security option SHALL be set according to <xref target="I-D.selander-ace-object-security"/> and OSCOAP parameters set as described above.
                    </t>
                </list>
            </t>
        </section>
        <section title="Implementation of Join Response" anchor="sec_implemjoinresponse">
            <t>
                If OSCOAP processing is a success, Join Response message SHALL be a CoAP response:
                <list style="symbols">
                    <t>
                        The response Code is 2.05 (Content).
                    </t>

                    <t>
                        The payload is a CBOR array containing, in order:
                        <list style="symbols">
                            <t> 
                                COSE Key Set <xref target="I-D.ietf-cose-msg"/>. 
                                Each key in the Key Set SHALL be a symmetric key.
                                A key that is present in the Key Set and does not have an identifier is assumed to be "K2" link-layer key from <xref target="I-D.ietf-6tisch-minimal"/>.
                                Parameter "kid" of the COSE Key structure SHALL be used to denote pair-wise keys if present, where the value SHALL be set to the address of the corresponding peer.
                            </t>
                            <t>
                                Optional byte string representing IEEE 802.15.4 short address assigned to JN. 
                                If the length of the byte string is different than 2 bytes, the implementation SHOULD ignore it.  
                            </t>
                        </list>
                    </t>
                </list>
<figure>
<artwork><![CDATA[
    payload = [
        COSE_KeySet,
        ? short_address : bstr,
    ]
]]></artwork>
</figure>
            </t>
        </section>
    </section>
    <section title="Link-layer requirements" anchor="sec_llreq">
        <t>
            All frames in a 6TiSCH network MUST use link-layer frame security. 
            The frame security options MUST include frame authentication, and MAY include frame encryption.
        </t>
        <t>
            In order for the JN to be able to validate that the Enahanced Beacon frame is coming from a 6TiSCH network, EB frames are authenticated at the link layer using CCM* per <xref target="IEEE802154e"/>.
            The frame is protected with a 16-byte key, and a 13-byte nonce constructed from current Absolute Slot Number (ASN) and the JAs address, as shown in <xref target="fig_nonceconstruction"/>:
            <figure title="CCM* nonce construction" anchor="fig_nonceconstruction">
<artwork><![CDATA[
            +-------------------------------------------+
            |  Address (8B or 00-padded 2B) | ASN (5B)  |
            +-------------------------------------------+
]]></artwork>
            </figure>
        </t>
        <t>
            The JN uses the initial key K1 until it is configured with a new link-layer key K2 as described above.
            JA should accept DATA and ACKNOWLEDGMENT frames secured under K1 during the duration of the join process.
            How JA learns whether the join process is ongoing is out of scope of this specification.
        </t>
        <t>
            As the EB itself does not contain security information, where the link key is known, an attacker may craft a frame that appears to be a valid EB, since the JN can neither know the ASN a priori or verify the address of the JA.
            This permits a Denial of Service (DoS) attack at the JN.  
            Beacon authentication keys are discussed in <xref target="sec_wellknown"/> and <xref target="sec_privatekey"/>.
        </t>
        <section title="Well-known beacon authentication key" anchor="sec_wellknown">
            <t>
                For zero-touch operation, where any 6TiSCH device can attempt to join any 6TiSCH network out of the box, a well-known EB link-layer key MUST be used.
                The value of this key is specified in <xref target="I-D.ietf-6tisch-minimal"/>.
            </t>
        </section>
        <section title="Private beacon authentication key" anchor="sec_privatekey">
            <t>
                In practice, some pre-configuration is done when the device is manufactured or designated for a specific network (i.e. the network is one-touch) or a network operator may not wish to allow arbitrary devices to try to join.
                A private (per-vendor, or per-installation) EB link-layer key MAY be used in place of a well-known key to create a private network.                
            </t>
        </section>
    </section>
    <section title="Asymmetric Keys" anchor="sec_asymmetric">
        <t>
            Certificates may be used to exchange public keys between the JN and JCE.  
            The key pair is generated using elliptic curve secp256r1, and the certificate containing the public key is signed using ECDSA.
            The certificate itself may be a compact representation of an X.509 certificate, or a full X.509 certificate. 
            Compact representation of X.509 certificates is out of scope of this specification.
            The certificate is signed by a root CA whose certificate is installed on all nodes participating in a particular 6TiSCH network, allowing each node to validate the certificate of the JCE or JN as appropriate.
        </t>
    </section>
    <section title="Security Considerations" anchor="sec_securityconsiderations">
        <t>
            Being a stateless relay, JA blindly forwards the join traffic into the network.
            While the exchange between JN and JA takes place over a shared cell, join traffic is forwarded using dedicated cells on the JA to JCE path.
            In case of distributed scheduling, the join traffic may therefore cause intermediate nodes to request additional bandwidth.
            Because the relay operation of JA is implemented at the application layer, JA is the only hop on the JA-6LBR path that can distinguish join traffic from regular IP traffic in the network. 
            It is therefore permitted to implement rate limiting at JA.
        </t>
        <t>
            The shared nature of the "minimal" cell used for join traffic makes the network prone to DoS attacks by congesting the JA with bogus radio traffic.
            As such an attacker is limited by emitted radio power, redundancy in the number of deployed JAs alleviates the issue and also gives JN a possibility to use the best available link for join.
            How a network node decides to become a JA is out of scope of this specification.
        </t>
        <t>
            Because the well-known beacon authentication key does not provide any security, it is feasible for an attacker to generate EBs that will get accepted at JN.
            At the time of the join, JN has no means of verifying the content in the EB and has to accept it at "face value".
            As the join response message in such cases will either fail the security check or will time out, JN may implement a blacklist in order to filter out undesired beacons and try to join the next appearingly valid network.
            The blacklist alleviates the issue but is effectively limited by node's available memory.
            Such bogus beacons will prolong the join time of JN and so the time spent in "minimal" <xref target="I-D.ietf-6tisch-minimal"/> duty cycle mode.
            The permitted practice is to use a private, per-installation beacon authentication key.
        </t>
        <t>
           TODO: Expand on security considerations section. 
        </t>
    </section>
    <section title="IANA Considerations" anchor="sec_ianaconsiderations">
        <t>
               There is no IANA action required for this document.
        </t>
    </section>
    <section title="Acknowledgments" anchor="sec_ack">
    </section>
    </middle>
<back>
    <references title="Normative References">
        <!-- RFC 6TiSCH-->
        <!-- RFC others -->
        <?rfc include='reference.RFC.2119'?>                         <!-- Key words for use in RFCs to Indicate Requirement Levels -->
        <?rfc include='reference.RFC.7252'?>                         <!-- CoAP RFC-->
        <?rfc include='reference.RFC.7049'?>                         <!-- CBOR -->
        <?rfc include='reference.RFC.5869'?>                         <!-- HMAC -->
        <!-- I-D 6TiSCH -->
        <!-- I-D others -->
        <?rfc include='reference.I-D.ietf-cose-msg'?>
        <?rfc include='reference.I-D.selander-ace-object-security'?>
        <?rfc include='reference.I-D.selander-ace-cose-ecdhe'?>
        <!-- external -->
    </references>
    <references title="Informative References">
        <!-- RFC 6TiSCH-->
        <?rfc include='reference.RFC.7554'?>                         <!-- Using IEEE 802.15.4e Time-Slotted Channel Hopping (TSCH) in the Internet of Things (IoT): Problem Statement -->
        <!-- RFC others -->
        <?rfc include='reference.RFC.6775'?>                        <!-- Neighbor Discovery for 6LoWPANs -->
        <?rfc include='reference.RFC.6347'?>                         <!-- DTLS RFC-->
        <!-- I-D 6TiSCH -->
        <?rfc include='reference.I-D.ietf-6tisch-minimal'?>
        <?rfc include='reference.I-D.ietf-6tisch-architecture'?>
        <?rfc include='reference.I-D.ietf-6tisch-6top-protocol'?>
        <?rfc include='reference.I-D.ietf-6tisch-terminology'?>
        <!-- I-D others -->
        <!-- external -->
    </references>
    <references title="External Informative References">
        <reference anchor="IEEE802154">
            <front>
                <title>
                    IEEE std. 802.15.4, Part. 15.4: Wireless Medium Access Control (MAC) and Physical Layer (PHY) Specifications for Low-Rate Wireless Personal Area Networks
                </title>
                <author>
                    <organization>IEEE standard for Information Technology</organization>
                </author>
                <date/>
            </front>
        </reference>
        <reference anchor="IEEE802154e">
            <front>
                <title>
                    IEEE standard for Information Technology, IEEE std.802.15.4, Part. 15.4: Wireless Medium Access Control (MAC) and Physical Layer (PHY) Specifications for Low-Rate Wireless Personal Area Networks, June 2011 as amended by IEEE std. 802.15.4e, Part. 15.4: Low-Rate Wireless Personal Area Networks (LR-WPANs) Amendment 1: MAC sublayer
                </title>
                <author>
                    <organization>IEEE standard for Information Technology</organization>
                </author>
                <date month="April" year="2012"/>
            </front>
        </reference>
    </references>
    <section title="Examples" anchor="sec_examples">
        <t>
            TODO: Add some examples once protocol specification section is finalized.
        </t>
    </section>
</back>
</rfc>
