<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc subcompact="yes"?>
<rfc category="info" ipr="trust200902" docName="draft-simon-6tisch-minimal-security-00">
<front>
    <title abbrev="6tisch-minimal-security">
        Minimal Security Framework for 6TiSCH
    </title>
    <author initials="J" surname="Simon" fullname="Jonathan Simon" role="editor">
        <organization>Linear Technology</organization>
        <address>
            <postal>
                <street>32990 Alvarado-Niles Road, Suite 910</street>
                <city>Union City</city>
                <region>CA</region>
                <code>94587</code>
                <country>USA</country>
            </postal>
            <email>jsimon@linear.com</email>
        </address>
    </author>
    <author initials="K" surname="Pister" fullname="Kris Pister">
        <organization>University of California Berkeley</organization>
        <address>
            <postal>
                <street>490 Cory Hall</street>
                <city>Berkeley</city>
                <region>California</region>
                <code>94720</code>
                <country>USA</country>
         </postal>
         <email>kpister@eecs.berkeley.edu</email>
      </address>
   </author>
    <author initials="M" surname="Vucinic" fullname="Malisa Vucinic">
        <organization>Inria</organization>
        <address>
            <postal>
                <street>2 Rue Simone Iff</street>
                <city>Paris</city>
                <code>75012</code>
                <country>France</country>
            </postal>
            <email>malisa.vucinic@inria.fr</email>
        </address>
    </author>
    <date/>
    <area>Internet Area</area>
    <workgroup>6TiSCH</workgroup>
    <keyword>Draft</keyword>
    <abstract>
        <t>
            This draft describes the minimal mechanisms required to support secure initial configuration of the 6top layer in a device being added to a 6TiSCH network. 
            The goal of this configuration is to set link-layer keys, and to establish a session with a coordinating entity who may set a communications schedule or otherwise configure the joining device's 6top layer, and do so in a "touchless" manner.
            Additional security behaviors and mechanisms may be added on top of this minimal framework.
        </t>
    </abstract>
    <note title="Requirements Language">
        <t>
            The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.
        </t>
    </note>
</front>
<middle>
    <section title="Introduction"                                    anchor="sec_intro">
        <t>
            When a previously unknown device seeks admission to a 6TiSCH <xref target="RFC7554"/> Network (to "join"), it must first synchronize to the network, and then validate itself to the network (and vice versa). 
            At this point it can expect to interact with the network to configure its 6top layer  <xref target="I-D.wang-6tisch-6top-sublayer"/> – at first to configure link-layer keying material, and perhaps additional communications resources to other peers for redundancy and to maintain synchronization.  
            Only then the node may establish an end-to-end secure session with an Internet host using DTLS <xref target="RFC6347"/> or OSCOAP <xref target="I-D.selander-ace-object-security"/>. 
            Once the application requirements are known, the device will interact with the PCE to request additional resources as needed, or to be reconfigured as the network changes.
        </t>
        <t>
            This document describes the mechanisms comprising a minimal feature set for a device to join a 6TiSCH network, up to the point where it can establish a secure session with an Internet host. 
        </t>
        <t>
            It presumes a network as described by <xref target="I-D.ietf-6tisch-architecture"/>, <xref target="I-D.ietf-6tisch-6top-interface"/>, and <xref target="I-D.wang-6tisch-6top-sublayer"/>. 
        </t>
    </section>
    <section title="Acronyms" anchor="sec_acronyms">
        <t>
            6TiSCH: 6LoWPAN on top of a TSCH MAC
        </t>
        <t>
            6top:  The 6TiSCH Operational sublayer – the "vocabulary" used to configure an 802.15.4e MAC for use in a 6TiSCH network.
        </t>
        <t>
            CoAP:  Constrained Application Protocol (RFC 7252)
        </t>
        <t>
            COSE:  CBOR Object Signing and Encryption
        </t>
        <t>
            OSCoAP: Object Security for CoAP
        </t>
        <t>
            TSCH: Time-Slotted Channel Hopping mode of the IEEE 802.15.4 MAC
        </t>
        <t>
            SH: Security Handshake
        </t>
        <t>
            MAC: Media Access Control
        </t>
        <t>
            JN:  Joining node
        </t>
        <t>
            JCE: Join coordinating entity responsible for identifying and arbitrating communications resources for joining devices
        </t>
        <t>
            JA:  Join assistant – the device within radio range of the JN that generates EBs and facilitates end-to-end communications between the JN and JCE.
        </t>
        <t>
            EB:  Enhanced Beacon
        </t>
        <t>
            ASN: Absolute slot number
        </t>
        <t>
            PK:  Public Key (asymmetric) based on ECC
        </t>
        <t>
            PSK:  Pre-shared Key
        </t>
        <t>
            PCE:  Path computation entity responsible for managing communications resources in the 6TiSCH network.
        </t>
        <t>
            ECC:  Elliptic curve cryptography
        </t>
    </section>
    <section title="Join Overview" anchor="sec_overview">
        <t>
        This section describes the steps taken by a joining node (JN) in a 6TiSCH network. When a previously unknown device seeks admission to a 6TiSCH <xref target="RFC7554"/> network, the following exchange occurs:
            <list style="numbers">
                <t>
                    The JN listens for an Enhanced Beacon (EB) frame <xref target="IEEE802154e"/>. 
                    This frame provides network synchronization information, and tells the device when it can send a frame to the Beaconer (the Join Assistant, JA), and when it can expect to receive a frame from the JA.
                    It does not contain information about communication schedules being used in the network, about the security used in the network, or any other network information.
                </t>
                <t>
                    The JN sends frames to the JA device that securely identifies the new device to the network. 
                    These frames are directed to the Join Coordination Entity or JCE, which may be the JA or another device.
                </t>
                <t>
                    The JN receives one or more frames from JCE (via the JA) that sets up one or more link-layer keys used to authenticate subsequent transmissions to peers.
                </t>
            </list>
            From the joining node's perspective, minimal joining is a local phenomenon – the JN only interacts with the JA, and it need not know how far it is from the DAG root, or how to route to the JCE or PCE.
            Only after establishing one or more link-layer keys does it "care" about the particulars of a 6TiSCH network.

            The handshake is shown as a transaction diagram in <xref target="fig_messagesequence"/>:

            <figure title="Message sequence for JOIN message" anchor="fig_messagesequence">
<artwork><![CDATA[
   +-----+               +----------+              +-----------+
   | JCE |               |    JA    |              |     JN    |
   |     |               |          |              |           |
   +-----+               +----------+              +-----------+
      |                        |                            |
      |                        |-------ENH BEACON (1)------>|
      |                        |                            |
      |<-Sec. Handshake (2a)-->|<--Security Handshake (2)-->|
      |                        |                            |
      |<--Join request (3a)----|<----Join request (3) ------|
      |                        |                            |
      |---Join response (4a)-->|----Join response (4) ----->|
      |                        |                            |
      |<=====6top config =====>|<======6top config  =======>|
      |                        |                            |
]]></artwork>
            </figure>
            The details of each step are described in the following sections.
        </t>
        <section title="Step 1 - Enhanced Beacon" anchor="sec_enhanced">
            <t>
                The JN hears an EB from the JA and synchronizes itself to the joining schedule.
                At this point the JN may proceed to step 2, or continue to listen for additional EBs. 
                If more than one EB is heard, the JN may use a metric (not described here) based on DAG rank and received signal level of the EB, or other factors to decide which JA to use for the security handshake in step 2.
            </t>
            <t>
                This document assumes that EBs are formatted to carry JCE's global address in the payload of the frame.
                JN thus learns JCE's address upon reception of an EB from JA.
            </t>
        </section>
        <section title="Step 2 - Security Handshake" anchor="sec_handshake">
            <t>
                The security handshake uses Ephemeral Diffie-Hellman over COSE (EDHOC) <xref target="I-D.selander-ace-cose-ecdhe"/> to establish the shared secret used to encrypt the join request and join response.
            </t>
            <section title="Pre-Shared Key" anchor="sec_psk">
                <t>
                    When using a pre-shared symmetric key, the Diffie-Hellman key exchange and the use of EDHOC is optional. 
                    This cuts down on traffic between JCE and JN, but requires pre-configuration of the shared key on both devices.
                </t>
                <t>
                    In case EDHOC step was omitted, the key used for protection of the join request and join response in the next step is the PSK.
                    This means that the protocol trades off perfect forward secrecy for reduced traffic load between JN and JCE.
                    A consequence is that if long-term PSK is compromised, keying material transfered as part of the join response is compromised as well.
                    However, compromise of the JN where PSK is stored would also imply the compromise of the same keying material, as it is likely to be found in node's memory.
                </t>
                <t>
                    It is RECOMMENDED to use unique PSKs for each JN.
                </t>
            </section>
            <section title="ECC Asymmetric Key" anchor="sec_ecc">
                <t>
                    When using an asymmetric key, the JN and JCE need to receive and validate each other's public key certificate before conducting the Diffie-Hellman key exchange. 
                    This process is described in <xref target="sec_asymmetric"/>.
                </t>
            </section>
        </section>
        <section title="Step 3 - Join Request" anchor="sec_joinrequest">
            <t>
                The join request is sent from the JN to the JA using the slot information from the EB, and addressed to the JCE. 
            </t>
            <t>
                The join request is authenticated/encrypted end-to-end using AES-CCM-16-64-128 algorithm from <xref target="I-D.ietf-cose-msg"/>  and the shared secret from step 2 as the key. 
                The nonce is derived from the shared secret, JN's EUI-64 and a monotonically increasing counter initialized to 0 when first starting.
            </t>
        </section>
        <section title="Step 4 - Join Response" anchor="sec_joinresponse">
            <t>
                The join response is sent from the JCE to the JN through JA that serves as a relay.
                The JA delivers it to the JN using the slot information from the EB.
            </t>
            <t>
                The join response is authenticated/encrypted using AES-CCM-16-64-128 algorithm from <xref target="I-D.ietf-cose-msg"/> with the shared secret from step 2. 
                TODO:The nonce is constructed from the JCE's link-local address, and a monotonically increasing counter matching that of the join request. 

            </t>
            <t>
                The join response contains one or more (per-peer) link-layer key(s) K2 that the JN will use for subsequent communication.
            </t>
        </section>
    </section>
    <section title="Protocol Specification" anchor="sec_details">
        <t>
            The join protocol from <xref target="sec_overview"/> is implemented over CoAP <xref  target="RFC7252"/>.
            JN SHALL play the role of a CoAP client, JCE the role of a CoAP server, while JA SHALL implement CoAP forward proxy functionality <xref target="RFC7252"/>.
            Note that since JA is likely a constrained device, it does not need to implement a cache but rather process proxy-related CoAP options and make requests on behalf of JN that is not yet part of the network.
        </t>
        <t>
            JN and JCE SHALL protect their exchange end-to-end (over the proxy) using OSCOAP <xref target="I-D.selander-ace-object-security"/>.
            The OSCOAP security context SHALL be derived as per Section 3.2 of <xref target="I-D.selander-ace-object-security"/> using HKDF <xref target="RFC5869"/> as the key derivation function.
            Shared secret key derivation material SHALL be the secret generated by the run of EDHOC, or the PSK in case EDHOC step was omitted.
            Implementations compliant with this document MUST implement AES-CCM-16-64-128 algorithm from <xref target="I-D.ietf-cose-msg"/>.
            CoAP messages are therefore protected with an 8-byte CCM authentication tag and the algorithm uses 13-byte long nonces. 
        </t>
        <t>
            JN SHALL designate a JA as a proxy by including in the CoAP requests the Proxy-URI option with JCE's global IPv6 address and "join" as the URI-Path.
            In order to facilitate a stateless implementation of JA proxying, JN shall encode in the CoAP message the information necessary for the JA to send the response back - "relay_info".
            For this purpose, JN uses the "Sender ID" parameter of OSCOAP's security context structure that makes part of Additional Authentication Data (AAD) and is therefore sent in clear, readable by JA, and echoed back in the response from JCE. 
            This makes possible to implement JA's CoAP proxy in a stateless manner, in order to counter Denial of Service attacks. 
            It also allows JCE to look up the right security context for communication with a given JN.
        </t>
        <section title="Implementation of relay_info" anchor="sec_implemrelayinfo">
            <t>
                The relay_info is implemented as a CBOR <xref target="RFC7049"/> array object containing:
                 <list style="symbols">
                    <t>
                        EUI-64: JN's EUI-64 address
                    </t>
                    <t>
                        source_port: JN's UDP source port
                    </t>
                    <t>
                        token: JN's CoAP token
                    </t>
                </list>
<figure>
<artwork><![CDATA[
    relay_info = [
        EUI-64 : bstr,
        source_port : uint,
        token : uint
    ]
]]></artwork>
</figure>
                JN SHALL wrap the relay_info object as a byte string and use it to set the "Sender ID" parameter of OSCOAP.
            </t>
        </section>
        <section title="Implementation of Join Request" anchor="sec_implemjoinrequest">
            <t>
                Join Request message SHALL be mapped to a CoAP GET request, Uri-Path "join", with "Sender ID" parameter of OSCOAP set, as described above.
            </t>
        </section>
        <section title="Implementation of Join Response" anchor="sec_implemjoinresponse">
            <t>
                If OSCOAP processing is a success, Join Response message SHALL be a CoAP response, Code 2.05 (Content) with payload formatted as a COSE Key Set.
                Each key in the Key Set SHALL be a symmetric key (see <xref target="I-D.ietf-cose-msg"/>).
                Key that is present in the Key Set and does not have an identifier is assumed to be "K2" link-layer key from <xref target="I-D.ietf-6tisch-minimal"/>.
                Parameter "kid" of the COSE Key structure SHALL be used to denote pair-wise keys if present, where the value SHALL be set to the EUI-64 address of the corresponding peer.
            </t>
        </section>
    </section>
    <section title="Link-layer requirements" anchor="sec_llreq">
        <t>
            All frames in a 6TiSCH network MUST use link-layer frame security. 
            The frame security options MUST include frame authentication, and MAY include frame encryption for frames that do not include a 6LoWPAN dispatch byte, i.e. link-layer content only frames.
        </t>
        <t>
            In order for the JN to be able to validate that the Enahanced Beacon frame is coming from a 6TiSCH network, EB frames are authenticated at the link layer using CCM* per <xref target="IEEE802154e"/>.
            The frame is protected with a 16-byte key, and a 13-byte nonce constructed from current ASN and the JAs address, as shown in <xref target="fig_nonceconstruction"/>:
            <figure title="CCM* nonce construction" anchor="fig_nonceconstruction">
<artwork><![CDATA[
            +-------------------------------------------+
            |  Address (8B or 00-padded 2B) | ASN (5B)  |
            +-------------------------------------------+
]]></artwork>
            </figure>
        </t>
        <t>
            The JN uses the initial key until it is configured with a new link-layer key K2 as described below in 5.
        </t>
        <t>
            As the EB itself does not contain security information, where the link key is known, an attacker may craft a frame that appears to be a valid EB, since the JN can neither know the ASN a priori or verify the address of the JA.
            This permits a Denial of Service (DoS) attack at the JN.  Beacon authentication keys are discussed in <xref target="sec_wellknown"/> and <xref target="sec_privatekey"/>.
        </t>
        <section title="Well-known beacon authentication key" anchor="sec_wellknown">
            <t>
                For touchless operation, where any 6TiSCH device can attempt to join any 6TiSCH network out of the box, a well-known EB link-layer key MUST be used.
            </t>
            <t>
            This key MUST be set to the value:
            </t>
            <t>
                              0x2851f6d0c0f936a6bc1570856978b36
            </t>
        </section>
        <section title="Private beacon authentication key" anchor="sec_privatekey">
            <t>
                In practice, some pre-configuration is done when the device is manufactured or designated for a specific network (i.e. the network is not touchless) or a network operator may not wish to allow arbitrary devices to try to join.
                A private (per-vendor, or per-installation) EB link-layer key MAY be used in place of a well-known key to create a private network.                
            </t>
        </section>
    </section>
    <section title="Asymmetric Keys" anchor="sec_asymmetric">
        <t>
            Certificates may be used to exchange "public" keys between the JN and JCE.  
            The key pair is generated using ECC curve secp256r1, and the certificate containing the public key is signed using ECDSA.
            The certificate itself may be a compact representation of an X.509 certificate, or a full X.509 certificate. 
            The certificate is signed by a root CA whose certificate is installed on all nodes participating in a particular 6TiSCH network, allowing each node to validate the certificate of the JCE or JN as appropriate.
        </t>
        <section title="Compact X.509" anchor="sec_compactx509">
            <t>
                In order to minimize traffic between the JCE and JN, a compact representation of the X.509 certificate MAY be used.
                All fields other than the public key and signature are elided. 
            </t>
        </section>
    </section>
    <section title="Security Considerations" anchor="sec_securityconsiderations">
        <t>
            Discussion of weaknesses in the above approach.
        </t>
        <t>
            DoS – "stealing" motes with malicious beacons
        </t>
        <t>
            DoS – sending in bogus joins to clog the network
        </t>
        <t>
            Compact cert – makes expiration, revocation impossible. Requires CA that is common to all devices.
        </t>
    </section>
    <section title="IANA Considerations" anchor="sec_ianaconsiderations">
        <t>
               There is no IANA action required for this document.
        </t>
    </section>
    </middle>
<back>
    <references title="Normative References">
        <!-- RFC 6TiSCH-->
        <!-- RFC others -->
        <?rfc include='reference.RFC.2119'?>                         <!-- Key words for use in RFCs to Indicate Requirement Levels -->
        <?rfc include='reference.RFC.7252'?>                         <!-- CoAP RFC-->
        <?rfc include='reference.RFC.6347'?>                         <!-- DTLS RFC-->
        <!-- I-D 6TiSCH -->
        <!-- I-D others -->
        <!-- external -->
        <?rfc include='reference.I-D.ietf-cose-msg'?>
        <?rfc include='reference.I-D.selander-ace-object-security'?>
        <?rfc include='reference.I-D.selander-ace-cose-ecdhe'?>
    </references>
    <references title="Informative References">
        <!-- RFC 6TiSCH-->
        <?rfc include='reference.RFC.7554'?>                         <!-- Using IEEE 802.15.4e Time-Slotted Channel Hopping (TSCH) in the Internet of Things (IoT): Problem Statement -->
        <!-- RFC others -->
        <?rfc include='reference.RFC.7049'?>                         <!-- CBOR -->
        <?rfc include='reference.RFC.5869'?>                         <!-- HMAC -->
        <!-- I-D 6TiSCH -->
        <?rfc include='reference.I-D.ietf-6tisch-minimal'?>
        <?rfc include='reference.I-D.ietf-6tisch-terminology'?>
        <?rfc include='reference.I-D.wang-6tisch-6top-sublayer'?>
        <?rfc include='reference.I-D.ietf-6tisch-6top-interface'?>
        <?rfc include='reference.I-D.ietf-6tisch-architecture'?>
        <?rfc include='reference.I-D.richardson-6tisch--security-6top'?>
        <!-- I-D others -->
        <!-- external -->
    </references>
    <references title="External Informative References">
        <reference anchor="IEEE802154">
            <front>
                <title>
                    IEEE std. 802.15.4, Part. 15.4: Wireless Medium Access Control (MAC) and Physical Layer (PHY) Specifications for Low-Rate Wireless Personal Area Networks
                </title>
                <author>
                    <organization>IEEE standard for Information Technology</organization>
                </author>
                <date/>
            </front>
        </reference>
        <reference anchor="IEEE802154e">
            <front>
                <title>
                    IEEE standard for Information Technology, IEEE std.802.15.4, Part. 15.4: Wireless Medium Access Control (MAC) and Physical Layer (PHY) Specifications for Low-Rate Wireless Personal Area Networks, June 2011 as amended by IEEE std. 802.15.4e, Part. 15.4: Low-Rate Wireless Personal Area Networks (LR-WPANs) Amendment 1: MAC sublayer
                </title>
                <author>
                    <organization>IEEE standard for Information Technology</organization>
                </author>
                <date month="April" year="2012"/>
            </front>
        </reference>
    </references>
</back>
</rfc>
