<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7252.xml">
<!ENTITY RFC7049 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7049.xml">
<!ENTITY I-D.ietf-cose-msg SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-cose-msg.xml">
<!ENTITY I-D.ietf-core-comi SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-core-comi.xml">
<!ENTITY I-D.ietf-core-object-security SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-core-object-security.xml">
<!ENTITY I-D.ietf-6tisch-minimal-security SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-6tisch-minimal-security.xml">
<!ENTITY I-D.ietf-6tisch-dtsecurity-secure-join SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-6tisch-dtsecurity-secure-join.xml">
<!ENTITY I-D.ietf-6tisch-6top-protocol SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-6tisch-6top-protocol.xml">
<!ENTITY I-D.ietf-anima-bootstrapping-keyinfra SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-anima-bootstrapping-keyinfra.xml">
<!ENTITY I-D.ietf-6tisch-terminology SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-6tisch-terminology.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc tocdepth="2"?>

<rfc ipr="trust200902" docName="draft-richardson-6tisch-minimal-rekey-02" category="std">

  <front>
    <title abbrev="6tisch-minimal-rekey">Minimal Security rekeying mechanism for 6TiSCH</title>

    <author initials="M." surname="Richardson" fullname="Michael Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
      </address>
    </author>

    <date year="2017" month="August" day="23"/>

    <area>Internet</area>
    <workgroup>6TiSCH Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This draft describes a mechanism to rekey the networks used by 6TISCH nodes.
It leverages the security association created during an enrollment protocol.
The rekey mechanism permits incremental deployment of new sets of keys,
followed by a rollover to a new key.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>6TiSCH networks of nodes often use a pair of keys, K1/K2 to authenticate beacons (K1),
encrypt broadcast traffic (K1) and encrypt unicast traffic (K2).  These keys need to
occasionally be refreshed for a number of reasons:</t>

<t><list style="symbols">
  <t>cryptographic hygiene: the keys must be replaced before the ASN roles over or there could be repeated use of the same key.</t>
  <t>to remove nodes from the group: replacing the keys excludes any nodes that are suspect, or which are known to have left the network</t>
  <t>to recover short-addresses: if the JRC is running out of short (2-byte) addresses, it can rekey the network in order to garbage collect the set of addresses.</t>
</list></t>

<t>This protocol uses the CoMI <xref target="I-D.ietf-core-comi"/> to present the set of 127 key pairs.</t>

<t>In addition to providing for rekey, this protocol includes access to the allocated short-address.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>. These words
may also appear in this document in lowercase, absent their normative meanings.</t>

<t>The reader is expected to be familiar with the terms and concepts defined in
<xref target="I-D.ietf-6tisch-terminology"/>, <xref target="RFC7252"/>,
<xref target="I-D.ietf-core-object-security"/>, and <xref target="I-D.ietf-anima-bootstrapping-keyinfra"/>.</t>

</section>
<section anchor="treedigram" title="Tree diagram notation">

<t>A simplified graphical representation of the data models is used in
this document. The meaning of the symbols in these diagrams is as
follows:</t>

<t><list style="symbols">
  <t>Brackets "[" and "]" enclose list keys.</t>
  <t>Braces "{" and "}" enclose feature names, and indicate that the
named feature must be present for the subtree to be present.</t>
  <t>Abbreviations before data node names: "rw" (read-write) represents
configuration data and "ro" (read-only) represents state data.</t>
  <t>Symbols after data node names: "?" means an optional node, "!"
means a presence container, and "*" denotes a list and leaf-list.</t>
  <t>Parentheses enclose choice and case nodes, and case nodes are also
marked with a colon (":").</t>
  <t>Ellipsis ("&#8230;") stands for contents of subtrees that are not
shown.</t>
</list></t>

</section>
<section anchor="an-approach-to-rekeying" title="An approach to rekeying">

<t>Rekeying of the network requires that all nodes be updated with the new keys.
This can take time as the network is constrained, and this management traffic is
not highest priority.</t>

<t>The JRC must reach out to all nodes that it is aware of.  As the JRC has originally provided the keys
via either zero-touch <xref target="I-D.ietf-6tisch-dtsecurity-secure-join"/> or
<xref target="I-D.ietf-6tisch-minimal-security"/> protocol, and in each case, the JRC assigned the short-address
to the node, so it knows about all the nodes.</t>

<t>The data model presented in this document provides for up to 127 K1/K2 keys, as each key
requires a secKeyId, which is allocated from a 255-element palette provides by <xref target="IEEE8021542015"/>.
Keys are to be updated in pairs, and the pairs are associated in the following way: the K1 key
is always the odd numbered key (1,3,5), and the K2 key is the even numbered key that follows (2,4,6).
A secKeyId value of 0 is invalid, and the secKeyId value of 255 is unused in this process.</t>

<t>Nodes MAY support up to all 127 key pair slots, but MUST support a minimum of 6 keys (3 slot-pairs).
When fewer than 127 are supported, the node MUST support secKeyId values from 1 to 254 in
a sparse array fashion.</t>

<t>A particular key slot-pair is considered active, and this model provides a mechanism to query and also
to explicitely set the active pair.</t>

<t>Nodes decrypt any packets for which they have keys, but MUST continue to send using only the
keypair which is considered active.  Receipt of a packet which is encrypted (or authenticated in
the case of a broadcast) with a secKeyId larger (taking consideration that secKeyId wraps at 254) than
the active slot-pair causes the node to change active slot pairs.</t>

<t>This mechanism permits the JRC to provision new keys into all the nodes while the network continues to
use the existing keys. When the JRC is certain that all (or enough) nodes have been provisioned
with the new keys, then the JRC causes a packet to be sent using the new key.  This can
be the JRC sending the next Enhanced Beacon or unicast traffic using the new key if the JRC
is also a regular member of the LLN.  In the likely case that the JRC has no direct connection
to the LLN, then the JRC updates the active key to the new key pair using a CoMI message.</t>

<t>The frame goes out with the new keys, and upon receipt (and decryption) of the new frame all
receiving nodes will switch to the new active key.  Beacons or unicast traffic leaving those
nodes will then update additional peers, and the network will switch over in a flood-fill
fashion.</t>

<t>((EDNOTE: do we need an example?))</t>

</section>
<section anchor="yang-models" title="YANG models">

<section anchor="tree-diagram" title="Tree diagram">

<t>A diagram of the two YANG modules looks like:</t>

<figure title="Tree diagrams of two rekey modules" align="left" anchor="fig-tree"><artwork><![CDATA[
module: ietf-6tisch-symmetric-keying
    +--rw ietf6tischkeypairs* [counter]
    |  +--rw counter           uint16
    |  +--rw ietf6tischkey1
    |  |  +--rw secKeyDescriptor
    |  |  |  +--rw secKey?   binary
    |  |  +--rw secKeyIndex?        uint8
    |  +--rw ietf6tischkey2
    |     +--rw secKeyDescriptor
    |     |  +--rw secKey?   binary
    |     +--rw secKeyIndex?        uint8
    +--ro secKeyUsage
       +--ro txPacketsSent?       uint32
       +--ro rxPacketsSuccess?    uint32
       +--ro rxPacketsReceived?   uint32

module: ietf-6tisch-short-address
    +--ro ietf6shortaddresses
       +--ro shortaddress    binary
       +--ro validuntil      uint32
       +--ro effectiveat?    uint32

]]></artwork></figure>

</section>
<section anchor="yang-model-for-keys" title="YANG model for keys">

<figure><artwork><![CDATA[
module ietf-6tisch-symmetric-keying {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-6tisch-symmetric-keying";
  prefix "ietf6keys";

  //import ietf-yang-types { prefix yang; }
  //import ietf-inet-types { prefix inet; }

  organization
   "IETF 6tisch Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/6tisch/>
    WG List:  <mailto:6tisch@ietf.org>
    Author:   Michael Richardson
              <mailto:mcr+ietf@sandelman.ca>";

  description
    "This module defines the format for a set of network-wide 802.15.4
    keys used in 6tisch networks.  There are 128 sets of key pairs,
    with one keypair (K1) used to authenticate (and sometimes encrypt)
    multicast traffic, and another keypair (K2) used to encrypt unicast
    traffic.  The 128 key pairs are numbered by the (lower) odd
    keyindex, which otherwise is a 0-255 value.  Keyindex 0 is
    not valid.  This module is a partial expression of the tables in
    https://mentor.ieee.org/802.15/dcn/15/15-15-0106-07-0mag-security-section-pictures.pdf.
To read and write the key pairs, a monotonically increasing counter is added. A new key pair must be added with current_counter = last_counter+1. The current specification allows overwriting of earlier key pairs. It is up to the server to remove old key pairs, such that only the last three (two) pairs are stored and visible to the client.";

  revision "2017-03-01" {
    description
     "Initial version";
    reference
     "RFC XXXX: 6tisch minimal security";
  }

  // list of key pairs
  list ietf6tischkeypairs {
  key counter;
  description 
    "a list of key pairs with unique index: counter.";
  leaf  counter {
  type uint16{
     range "0..256";  // for the moment 256 items
    }
  mandatory "true";
  description
    "unique reference to the key pair for client access.";
  }  // counter
  
  // key descriptor for FIRST part of pair
  container ietf6tischkey1 {
    description
      "A voucher that can be used to assign one or more
       devices to an owner.";
// this container is pretty empty, a leaf would do the job.

    container secKeyDescriptor {
  // I assume this needs to be extended, why else a container?
      description
        "This container describes the details of a 
           specific cipher key";
      leaf secKey {
        type binary;
        description "The actual encryption key.
          This value is write only, and is not returned in a
          read, or returns all zeroes.";
      } // secKey
    }  // secKeyDescriptor

    // leaf secKeyIdMode is always 1, not described here.
    leaf secKeyIndex {
      type uint8;
      description
        "The keyIndex for this keySet. 
            A number between 1 and 255.";
      reference
        "IEEE802.15.4";
    } // secKeyIndex
 } // ietf6tischkey1

// key descriptor for SECOND part of pair
  container ietf6tischkey2 {
    description
      "A voucher that can be used to assign one or more
       devices to an owner.";
    container secKeyDescriptor {
  // I assume this needs to be extended, why else a container?
      description
        "This container describes the details of a 
           specific cipher key";
      leaf secKey {
        type binary;
        description "The actual encryption key.
          This value is write only, and is not returned in a
          read, or returns all zeroes.";
      } // secKey
    }  // secKeyDescriptor

    // leaf secKeyIdMode is always 1, not described here.
    leaf secKeyIndex {
      type uint8;
      description
        "The keyIndex for this keySet. 
           A number between 1 and 255.";
      reference
        "IEEE802.15.4";
    } // secKeyIndex
   } // ietf6tischkey2
 } //ietf6tischkeypairs

// the usage is over all pairs
    container secKeyUsage {
    config false; // cannot be set by client
    description
      "statistics of sent and received packets.";
      leaf txPacketsSent {
        type uint32;
        description "Number of packets sent with this key.";
      } // txPacketsSent
      leaf rxPacketsSuccess {
        type uint32;
        description "Number of packets received with this key that were
                     successfully decrypted and authenticated.";
      }// rxPacketsSuccess 
      leaf rxPacketsReceived {
        type uint32;
        description "Number of packets received with this key, both
            successfully received, and unsuccessfully.";
      } // rxPacketsReceived 

    } // secKeyUsage

    
  } // module ietf-6tisch-symmetric-keying 
]]></artwork></figure>

</section>
<section anchor="yang-model-for-short-address" title="YANG model for short-address">

<figure><artwork><![CDATA[
module ietf-6tisch-short-address {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-6tisch-short-address";
  prefix "ietf6shortaddr";

  //import ietf-yang-types { prefix yang; }
  //import ietf-inet-types { prefix inet; }

  organization
   "IETF 6tisch Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/6tisch/>
    WG List:  <mailto:6tisch@ietf.org>
    Author:   Michael Richardson
              <mailto:mcr+ietf@sandelman.ca>";

  description
   "This module defines an interface to set and interrogate
    the short (16-bit) layer-2 address used in 802.15.4
    TSCH mode networks.  The short addresses are used
    in L2 frames to save space.  A lifetime is included
    in terms of TSCH Absolute Slot Number, which acts
    as a monotonically increasing clock.  ";

  revision "2017-03-01" {
    description
     "Initial version";
    reference
     "RFC XXXX: 6tisch minimal security";
  }

  // top-level container
  container ietf6shortaddresses {
    config false;
    description
      "A 16-bit short address for use by the node.";

    leaf shortaddress {
      type binary{
         length 1..2;}
      mandatory true;
      description
        "The two byte short address to be set.";
    }
    leaf validuntil {
      type uint32;
      mandatory true;
      description "The Absolute Slot Number/256 at which
                   the address ceases to be valid.";
    }

    leaf effectiveat {
      type uint32;
      description "The Absolute Slot Number/256 at which
                   time the address was originally set.
                   This is a read-only attribute that
                   records the ASN when the shortaddress
                   element was last written or updated.";
    }
  }
}
]]></artwork></figure>

</section>
</section>
<section anchor="security-of-comi-link" title="Security of CoMI link">

<t>The CoMI resources presented here are protected by OSCOAP
(<xref target="I-D.ietf-core-object-security"/>), secured using the EDHOC
connection used for joining.  A unique application key is generated using
an additional key generation process with the unique label "6tisch-rekey".</t>

</section>
<section anchor="rekey-of-master-connection" title="Rekey of master connection">

<t>Should the OSCOAP connection need to be rekeyed, a new EDHOC process will be
necessary.  This will need access to trusted authentication keys, either the
PSK used from a one-touch process, or the locally significant domain
certificates installed during a zero-touch process.</t>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The rekey protocol itself runs over a network encrypted with the K2 key. The
end to end protocol from JRC to node is also encrypted using OSCOAP, so the
keys are not visible, nor is the keying traffic distinguished in anyway to an
observer.</t>

<t>As the secKeyId is not confidential in the underlying 802.15.4 frames, an
observer can determine what sets of keys are in use, and when a rekey is
activated by observing the change in the secKeyId.</t>

<t>The absolute value of the monitonically increasing secKeyId could provide
some information as to the age of the network.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This protocol permits the underlying network keys to be set.
Access to all of the portions of this interface MUST be restricted to an
ultimately trusted peer, such as the JRC.</t>

<t>An implementation SHOULD not permit reading the network keys. Those fields
should be write-only.</t>

<t>The OSCOAP security for this interface is initialized by a join mechanism,
and so depends upon the initial credentials provided to the node.  The
initial network keys would have been provided during the join process; this
protocol permits them to be updated.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document allocates a SID number for the YANG model.
There is no IANA action required for this document.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC7252;
&RFC7049;
&I-D.ietf-cose-msg;
&I-D.ietf-core-comi;
&I-D.ietf-core-object-security;


    </references>

    <references title='Informative References'>

&I-D.ietf-6tisch-minimal-security;
&I-D.ietf-6tisch-dtsecurity-secure-join;
&I-D.ietf-6tisch-6top-protocol;
&I-D.ietf-anima-bootstrapping-keyinfra;
&I-D.ietf-6tisch-terminology;
<reference anchor="IEEE8021542015" >
  <front>
    <title>IEEE Std 802.15.4-2015 Standard for Low-Rate Wireless Personal Area Networks (WPANs)</title>
    <author initials="." surname="IEEE standard for Information Technology">
      <organization></organization>
    </author>
    <date year="2015"/>
  </front>
</reference>


    </references>


<section anchor="example" title="Example">

<t>Example COMI requests/responses.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAF+inVkAA+1bX3PbRpJ/R5W/wxzzsFIiUCITO1l6s17FVhKdbdlnKeXb
2traGgJDaiIQ4GIA04xP99nv190zA4BknFTdZeseotqNwUHPTE//755GmqZJ
Y5vCzNRLW9qVLtS1ydraNltVmzuzteVSrUx2q0vrVmpR1erRjb1++n2i5/Pa
vJupR4112W26ktkpT0ryKiv1CovmtV40aW2xQJ27qkwPgadn0yT5RLlGl/k/
dFGVmNjUrUkSu6750TXTs7M/AkzXRs/UZdmYujRNslnOPD7qbVXfEbLf1VW7
Tu42HVT6jJBIMt3MsEeeJFmVA3KmWpdql1mbrO0sUaqpspnaGodHV9VNbRYu
/t6u+j8BmZt1cztTQFy3zW1V0wL0l/p/lbIl4F+O1Zt4+PhKaPOSXpjiEEBV
A71rkMMUK12q62rRbHB0PqSLUGalbTFTq6z+zJpm8RcXJowznSRlVa90Y98Z
Qu3Nt0+nk8kf/eOX04fT8Hj2BY9eps/GtEiaVc6kK7fcGawN/rOy+6PV/EeT
NanzUjMD08pFf+sIvsP6bsY+TN6EtwJm0h8rWx6CfNRU63RdV2BJVQwANG2T
zquqcU2t12uwPGWBXtT60EoQFqBWFdVSULq4uPjqbDp5+MX0bPJQ2Os1ZUTv
1HWTKwCMJw/HX6QEgxEwAJxkNXlRbdI3ugHPbG0K45x6bWrwGBp2DiFWV6bZ
EDfV0dvX51fueMQ7DIWJRUh2c/21LwOFq1LdQDkFa1khx56QS+CTJEmapkrP
6fxZkyQ3t9aJRqrcuKy2c+OU7ql3U4nSq+bWqDIg2DqTq/kWinZJilZWmDxO
LhtVmHem1kssQvCBY0o7V2VWsMtw1AbTc7yCckKWTVlXRbEyZaMC28bAzPid
O2TWxI/GgQhYhOBBOWhdUW15crUAhhvsChA8Y647SRZYutoIulrRRhVQpHNp
hgbUWKiysnleGDI7MBN1lbcZ4+v/Pnxie6P3SeKNTKQJ7U50wENjSiIRdlhr
W0dc1PPJ6fMpbw2eAmObkTTMjc6qElx/Pjk+SQzOtl03al5XOs+0a2Ds9GJh
M34PcuUqgLSl3QGYHo+VAuWwN+0I5HDwpkqqDICWJK3YYj8QdlEbd2tEdkCI
djU3jCiYA4l00NlPFe9SLaEpt1j9dru0hu3wrV99BSMsq60LnRGJDZYzDHB+
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
T3LVzm2H3URpb4O+897nc1cVLUKEa7qQFGMQakJgrPcw2n20YFJU2R02/n9X
IKA+d2q4LjoXeSCwHZbVD/rNjwW8wvAhw6SPBKGmL7/RjVesn4Sgpl+wH0Y1
Egb27DhmlEsY48l4PH18H8a7wgDVBX5FFER1eWq33UE23MM20Uzf9/Ds3Rns
x149v/LL2AgShyTulOoe2l/tH/SefE/q8c0gdyagLUXIHuI91Hs3GR/H/f8K
SbsyA0w3w84rIvHBiWx8uHQamwKxE1zavPUtjQenUec1Nf2GfvJNuGHuy9bB
maEdiRDkmiDlCdSVz/1P+SAKufdKdd93q90nT7AkfDNd2PJObqX5J7au2ppS
uq7vKtbaqQ9MmnChIK+un746f50c/WKv7PGJaLrJe3f6F8++f/U06a7cxdCS
/lFvGqDYIvrimF5Ty4sOeRORfGlKavUIaya67F9EE5CHoDm+/ai7aPfrFnoO
IzPyTp2vvkbcjshdh0SiFYhs6n5rQHJ9y4UoWkZI0HsbPkyQDwGwBsdVXIbm
A/cwQS4wNwnmUWdAHRsn+IXcenf95vRVmBlEm54S7iQ0AFJrzuvr556M0sCG
hN33BPptT/z3Coo63ViykddzRRsylVfwwGVCbSRS5OaCP7KIouh91dLvNOy6
uj5Rr2v7TmdbCFGvC8clvc9duo76xpliQR8WhLwodgp0rUGRVdLCxoX4hNqR
+Gol71bjs/p2mzImqK7qrSVSJ8ziBkTfx+RCJ2qonFNCW4duOR+Uhl6IXJpv
Wsufl1D+XW6RBkvlI6nmUtWnTrD4jZD0HvnUnR1TTuzTRWj0axHh1AVvE+IL
Hx2c9BflekxupGHdwFxwa1P3MRAfw7IKSRTPBkV7uluXcL+H9norqwY99O1N
HqGAtO9T0cGcxvY+qXnD8R8KKOKR5WMY39KW0K2asr3vuHT3FcXS7DT2jgdG
al+a+p9m9BuueqQMwsSk6Zxkch4VihJxvy3F2dwpzr858AqRI7fDsSI7ylL8
twfgC90G4ijUUxRUkzpf/M2Njh1gJAwIRalxZRVb9/2HGiQSgj/7jq7VqcOd
ZJ7b5q0pckfN0v4TIy4OsbfxfPJ2KH6WFqsl3WH4B8dr9qfw0RhZ2q5/7SSR
K1D68sxQEzf3HxFSfiJ94eYF2PW6kbvmXomBkwA+4INU73ca0PLOsEhR30Zb
/ZgPkBzi9WrYXMsSc3l+dX5YWrrPW3x/L7nr68tnoWQUbnK6dJO/0auNKK6s
rMW6+wbivCNw/MiCm9gzamuGtVzSkJOv7+bImOnlhXQwJYl/UE9fsbuFH3KN
O4WQgdz89dP/AJ++9LupPAAA

-->

</rfc>

